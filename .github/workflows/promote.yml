name: Promote Release via PR (DAG)

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Existing SemVer tag (e.g., 1.2.3)"
        required: true
      target_env:
        description: "Promotion target"
        type: choice
        options: [uat, psup, prod]
        required: true

permissions:
  contents: write
  pull-requests: write

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      TAG: ${{ steps.out.outputs.TAG }}
      SHA: ${{ steps.out.outputs.SHA }}
      SOURCE: ${{ steps.out.outputs.SOURCE }}
      TARGET: ${{ steps.out.outputs.TARGET }}
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - run: git fetch --all --tags

      - name: Validate SemVer tag & resolve SHA
        id: res
        shell: bash
        run: |
          TAG="${{ github.event.inputs.tag }}"
          if [[ ! "$TAG" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Invalid tag format '$TAG'. Use MAJOR.MINOR.PATCH." >&2; exit 1
          fi
          if ! git rev-parse "refs/tags/$TAG" >/dev/null 2>&1; then
            echo "Tag not found: $TAG" >&2; exit 1
          fi
          echo "sha=$(git rev-parse "refs/tags/$TAG^{commit}")" >> "$GITHUB_OUTPUT"
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"

      - name: Map env -> branches
        id: map
        shell: bash
        run: |
          case "${{ github.event.inputs.target_env }}" in
            uat)  echo "src=develop"       >> "$GITHUB_OUTPUT"; echo "tgt=release/uat"  >> "$GITHUB_OUTPUT" ;;
            psup) echo "src=release/uat"   >> "$GITHUB_OUTPUT"; echo "tgt=release/psup" >> "$GITHUB_OUTPUT" ;;
            prod) echo "src=release/psup"  >> "$GITHUB_OUTPUT"; echo "tgt=release/prod" >> "$GITHUB_OUTPUT" ;;
          esac

      - name: Set composite outputs
        id: out
        run: |
          echo "TAG=${{ steps.res.outputs.tag }}"   >> "$GITHUB_OUTPUT"
          echo "SHA=${{ steps.res.outputs.sha }}"   >> "$GITHUB_OUTPUT"
          echo "SOURCE=${{ steps.map.outputs.src }}" >> "$GITHUB_OUTPUT"
          echo "TARGET=${{ steps.map.outputs.tgt }}" >> "$GITHUB_OUTPUT"

  verify-ancestry:
    runs-on: ubuntu-latest
    needs: prepare
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - run: git fetch --all --tags
      - name: Ensure tag commit exists in predecessor branch
        shell: bash
        run: |
          SRC="${{ needs.prepare.outputs.SOURCE }}"
          SHA="${{ needs.prepare.outputs.SHA }}"
          git rev-parse --verify "origin/$SRC" >/dev/null 2>&1 || { echo "Missing branch $SRC"; exit 1; }
          git merge-base --is-ancestor "$SHA" "origin/$SRC" || {
            echo "Tag commit is not in '$SRC'. Promote in order." >&2; exit 1;
          }

  ensure-target:
    runs-on: ubuntu-latest
    needs: prepare
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - run: git fetch --all
      - name: Create target from predecessor if missing
        shell: bash
        run: |
          SRC="${{ needs.prepare.outputs.SOURCE }}"
          TGT="${{ needs.prepare.outputs.TARGET }}"
          if ! git rev-parse --verify "origin/$TGT" >/dev/null 2>&1; then
            echo "Creating $TGT from $SRC"
            git checkout -b "$TGT" "origin/$SRC"
            git push -u origin "$TGT"
          else
            echo "$TGT exists"
          fi

  create-promo-branch:
    runs-on: ubuntu-latest
    needs: [prepare, verify-ancestry, ensure-target]
    outputs:
      BRANCH: ${{ steps.mk.outputs.branch }}
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Configure git author
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Create branch from tag
        id: mk
        shell: bash
        run: |
          TAG="${{ needs.prepare.outputs.TAG }}"
          TGT="${{ needs.prepare.outputs.TARGET }}"
          PROMO_BRANCH="promote/${TAG}-to-${TGT}"
          git checkout -b "$PROMO_BRANCH" "refs/tags/$TAG"
          echo "branch=$PROMO_BRANCH" >> "$GITHUB_OUTPUT"

      # ✅ NEW: committing on top of the tag (which includes workflows)
      - name: Create dummy tree for promotion branch
        shell: bash
        run: |
          TAG="${{ needs.prepare.outputs.TAG }}"
          TGT="${{ needs.prepare.outputs.TARGET }}"
          BRANCH="$(git branch --show-current)"

          # Make branch empty so no workflows included
          git rm -rf . >/dev/null 2>&1 || true
          echo "Promotion: $TAG → $TGT at $(date -u +%FT%TZ)" > PROMOTION_INFO.txt
          git add PROMOTION_INFO.txt
          git commit -m "chore(release): promote $TAG → $TGT"
          git push -u origin "$BRANCH" --force
      

  open-pr:
    runs-on: ubuntu-latest
    needs: [prepare, create-promo-branch]
    permissions:
      pull-requests: write
      contents: read
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Open PR via GitHub API
        uses: actions/github-script@v7
        with:
          script: |
            const head = `${{ needs.create-promo-branch.outputs.BRANCH }}`;
            const base = `${{ needs.prepare.outputs.TARGET }}`;
            const title = `Promote ${{ needs.prepare.outputs.TAG }} → ${{ needs.prepare.outputs.TARGET }}`;
            const body = `Promotion PR for **${{ needs.prepare.outputs.TAG }}**.
            Source (predecessor): \`${{ needs.prepare.outputs.SOURCE }}\`
            Target: \`${{ needs.prepare.outputs.TARGET }}\``;

            try {
              const { data: pr } = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                head, // e.g. "promote/0.0.4-to-release/uat"
                base, // e.g. "release/uat"
                title,
                body,
                maintainer_can_modify: true,
                draft: false
              });
              core.info(`PR created: ${pr.html_url}`);
            } catch (e) {
              // 422 Unprocessable Entity usually means a PR already exists or no diff
              if (e.status === 422) {
                core.info('PR might already exist or no diff. Searching for an existing open PR...');
                const { data: prs } = await github.rest.pulls.list({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  state: 'open',
                  head: `${context.repo.owner}:${head}`,
                  base
                });
                if (prs.length > 0) {
                  core.info(`Existing PR: ${prs[0].html_url}`);
                } else {
                  core.setFailed(`Could not create or find PR. Details: ${e.message}`);
                }
              } else {
                core.setFailed(`PR create failed: ${e.message}`);
              }
            }

